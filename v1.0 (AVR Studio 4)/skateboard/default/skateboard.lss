
skateboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000812  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000812  000008a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ce  00800062  00800062  000008a8  2**0
                  ALLOC
  3 .debug_aranges 00000100  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000333  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000be4  00000000  00000000  00000cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b0  00000000  00000000  000018bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d2a  00000000  00000000  00001e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002f0  00000000  00000000  00002b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000606  00000000  00000000  00002e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000017b  00000000  00000000  00003492  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	25 c0       	rjmp	.+74     	; 0x5e <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	ff c1       	rjmp	.+1022   	; 0x416 <__vector_11>
  18:	3a c2       	rjmp	.+1140   	; 0x48e <__vector_12>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 e1       	ldi	r30, 0x12	; 18
  3a:	f8 e0       	ldi	r31, 0x08	; 8
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	11 e0       	ldi	r17, 0x01	; 1
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 33       	cpi	r26, 0x30	; 48
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	4f d0       	rcall	.+158    	; 0xf8 <main>
  5a:	d9 c3       	rjmp	.+1970   	; 0x80e <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_9>:
void setup_comms(void);
void setup_leds(void);

//Toggles O.K. LED once per second
ISR(TIMER0_OVF_vect)
{
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	8f 93       	push	r24
  6a:	9f 93       	push	r25
	
	tick0++;
  6c:	80 91 72 00 	lds	r24, 0x0072
  70:	90 91 73 00 	lds	r25, 0x0073
  74:	01 96       	adiw	r24, 0x01	; 1
  76:	90 93 73 00 	sts	0x0073, r25
  7a:	80 93 72 00 	sts	0x0072, r24
	if(tick0 >= 30)
  7e:	4e 97       	sbiw	r24, 0x1e	; 30
  80:	20 f0       	brcs	.+8      	; 0x8a <__vector_9+0x2c>
	{
		//led_toggle(0);
		tick0 = 0;
  82:	10 92 73 00 	sts	0x0073, r1
  86:	10 92 72 00 	sts	0x0072, r1
		//usart_send(msg, 4);
	}
}
  8a:	9f 91       	pop	r25
  8c:	8f 91       	pop	r24
  8e:	0f 90       	pop	r0
  90:	0f be       	out	0x3f, r0	; 63
  92:	0f 90       	pop	r0
  94:	1f 90       	pop	r1
  96:	18 95       	reti

00000098 <setup_comms>:

// Sets up XBee comms. Iden chars are used to identify first 3 bytes of INCOMING packets
void setup_comms(void)
{
	static uint8_t iden_chars[3];
	iden_chars[0] = 's';
  98:	83 e7       	ldi	r24, 0x73	; 115
  9a:	80 93 62 00 	sts	0x0062, r24
	iden_chars[1] = 'k';
  9e:	8b e6       	ldi	r24, 0x6B	; 107
  a0:	80 93 63 00 	sts	0x0063, r24
	iden_chars[2] = 't';
  a4:	84 e7       	ldi	r24, 0x74	; 116
  a6:	80 93 64 00 	sts	0x0064, r24
	
	comms_init(iden_chars);
  aa:	82 e6       	ldi	r24, 0x62	; 98
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	4d d3       	rcall	.+1690   	; 0x74a <comms_init>
}
  b0:	08 95       	ret

000000b2 <setup_leds>:
void setup_leds(void)
{
	static uint8_t *led_port[NUMBER_OF_LEDS + 1];
	static uint8_t led_pin[NUMBER_OF_LEDS + 1];
	// Define which port and pin each led is connected to, and then call led_init
	led_port[0] = &PORTD;
  b2:	82 e3       	ldi	r24, 0x32	; 50
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	90 93 6a 00 	sts	0x006A, r25
  ba:	80 93 69 00 	sts	0x0069, r24
	led_pin[0] = 5;
  be:	25 e0       	ldi	r18, 0x05	; 5
  c0:	20 93 65 00 	sts	0x0065, r18
	led_port[1] = &PORTD;
  c4:	90 93 6c 00 	sts	0x006C, r25
  c8:	80 93 6b 00 	sts	0x006B, r24
	led_pin[1] = 6;
  cc:	26 e0       	ldi	r18, 0x06	; 6
  ce:	20 93 66 00 	sts	0x0066, r18
	led_port[2] = &PORTD;
  d2:	90 93 6e 00 	sts	0x006E, r25
  d6:	80 93 6d 00 	sts	0x006D, r24
	led_pin[2] = 7;
  da:	87 e0       	ldi	r24, 0x07	; 7
  dc:	80 93 67 00 	sts	0x0067, r24
	led_port[3] = '\0';
  e0:	10 92 70 00 	sts	0x0070, r1
  e4:	10 92 6f 00 	sts	0x006F, r1
	led_pin[3] = '\0';
  e8:	10 92 68 00 	sts	0x0068, r1
	led_init(led_port, led_pin);
  ec:	89 e6       	ldi	r24, 0x69	; 105
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	65 e6       	ldi	r22, 0x65	; 101
  f2:	70 e0       	ldi	r23, 0x00	; 0
  f4:	e2 d0       	rcall	.+452    	; 0x2ba <led_init>
}
  f6:	08 95       	ret

000000f8 <main>:
		//usart_send(msg, 4);
	}
}


int main(void){
  f8:	cf 92       	push	r12
  fa:	df 92       	push	r13
  fc:	ef 92       	push	r14
  fe:	ff 92       	push	r15
 100:	0f 93       	push	r16
 102:	1f 93       	push	r17

	/***Variables***/
	static enum main_states_enum main_state = off;

	/***Intialisation Routines***/
	setup_leds();
 104:	d6 df       	rcall	.-84     	; 0xb2 <setup_leds>
	
	setup_comms();
 106:	c8 df       	rcall	.-112    	; 0x98 <setup_comms>
	
	tcnt0_init();
 108:	80 d1       	rcall	.+768    	; 0x40a <tcnt0_init>
	//tcnt2_init();
	motor_init();
 10a:	95 d0       	rcall	.+298    	; 0x236 <motor_init>
	alarm_init();
 10c:	5d d3       	rcall	.+1722   	; 0x7c8 <alarm_init>
	buzzer_init();
 10e:	2d d3       	rcall	.+1626   	; 0x76a <buzzer_init>
	uint16_t count_led = 0;

	sei();
 110:	78 94       	sei
					{
						
						main_state = on;
						first_time = true;
					}
					msg[0] = 'r';
 112:	32 e7       	ldi	r19, 0x72	; 114
 114:	d3 2e       	mov	r13, r19
					msg[1] = 'm';
 116:	2d e6       	ldi	r18, 0x6D	; 109
 118:	e2 2e       	mov	r14, r18
					msg[2] = 't';
 11a:	94 e7       	ldi	r25, 0x74	; 116
 11c:	f9 2e       	mov	r15, r25
					msg[3] = 0x03;
 11e:	03 e0       	ldi	r16, 0x03	; 3
				if(comms_is_new_packet())
				{
					if(comms_get_byte(STATUS_BYTE_POS) & (1<<ON_BIT_POS))
					{
						
						main_state = on;
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	c8 2e       	mov	r12, r24
						first_time = true;
 124:	11 e0       	ldi	r17, 0x01	; 1

	sei();
	while(1)
	{
		
		comms_update();
 126:	f0 d2       	rcall	.+1504   	; 0x708 <comms_update>
		buzzer_update();
 128:	32 d3       	rcall	.+1636   	; 0x78e <buzzer_update>
		alarm_update();
 12a:	51 d3       	rcall	.+1698   	; 0x7ce <alarm_update>

		if(alarm_is_triggered())
 12c:	59 d3       	rcall	.+1714   	; 0x7e0 <alarm_is_triggered>
 12e:	88 23       	and	r24, r24
 130:	11 f0       	breq	.+4      	; 0x136 <main+0x3e>
		{
			buzzer_single_beep();
 132:	21 d3       	rcall	.+1602   	; 0x776 <buzzer_single_beep>
			alarm_reset();
 134:	52 d3       	rcall	.+1700   	; 0x7da <alarm_reset>
		}

		// Main state machine
		switch(main_state)
 136:	80 91 71 00 	lds	r24, 0x0071
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	d9 f0       	breq	.+54     	; 0x174 <main+0x7c>
 13e:	81 30       	cpi	r24, 0x01	; 1
 140:	18 f0       	brcs	.+6      	; 0x148 <main+0x50>
 142:	82 30       	cpi	r24, 0x02	; 2
 144:	81 f7       	brne	.-32     	; 0x126 <main+0x2e>
 146:	3b c0       	rjmp	.+118    	; 0x1be <main+0xc6>
		{
			
			case off:
				if(first_time == true)
 148:	80 91 60 00 	lds	r24, 0x0060
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	51 f4       	brne	.+20     	; 0x164 <main+0x6c>
				{
					// Clear on bit in status byte
					status_byte &= ( (1<<ON_BIT_POS)^0xFF );
					// Clear in range bit
					status_byte &= ( (1<<IN_RANGE_BIT_POS)^0xFF );
 150:	80 91 7c 00 	lds	r24, 0x007C
 154:	8a 7f       	andi	r24, 0xFA	; 250
 156:	80 93 7c 00 	sts	0x007C, r24
					motor_disable();
 15a:	97 d0       	rcall	.+302    	; 0x28a <motor_disable>
					led_off(0);
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	18 d1       	rcall	.+560    	; 0x390 <led_off>
					first_time = false;	
 160:	10 92 60 00 	sts	0x0060, r1
				}
			
				
				// Check if new packet has arrived from remote
				if(comms_is_new_packet())
 164:	33 d2       	rcall	.+1126   	; 0x5cc <comms_is_new_packet>
 166:	88 23       	and	r24, r24
 168:	f1 f2       	breq	.-68     	; 0x126 <main+0x2e>
				{
					main_state = in_range;
 16a:	10 93 71 00 	sts	0x0071, r17
					first_time = true;
 16e:	10 93 60 00 	sts	0x0060, r17
 172:	d9 cf       	rjmp	.-78     	; 0x126 <main+0x2e>
				}
				
				break;
			// Skateboard is in range of remote, but not turned on yet
			case in_range:
				if(first_time == true)
 174:	80 91 60 00 	lds	r24, 0x0060
 178:	81 30       	cpi	r24, 0x01	; 1
 17a:	29 f4       	brne	.+10     	; 0x186 <main+0x8e>
				{
					// Set in-range bit in status byte
					status_byte |= (1<<IN_RANGE_BIT_POS);
 17c:	80 91 7c 00 	lds	r24, 0x007C
 180:	84 60       	ori	r24, 0x04	; 4
 182:	80 93 7c 00 	sts	0x007C, r24
				}
				
				if(comms_is_new_packet())
 186:	22 d2       	rcall	.+1092   	; 0x5cc <comms_is_new_packet>
 188:	88 23       	and	r24, r24
 18a:	69 f2       	breq	.-102    	; 0x126 <main+0x2e>
				{
					if(comms_get_byte(STATUS_BYTE_POS) & (1<<ON_BIT_POS))
 18c:	84 e0       	ldi	r24, 0x04	; 4
 18e:	13 d2       	rcall	.+1062   	; 0x5b6 <comms_get_byte>
 190:	80 ff       	sbrs	r24, 0
 192:	04 c0       	rjmp	.+8      	; 0x19c <main+0xa4>
					{
						
						main_state = on;
 194:	c0 92 71 00 	sts	0x0071, r12
						first_time = true;
 198:	10 93 60 00 	sts	0x0060, r17
					}
					msg[0] = 'r';
 19c:	d0 92 74 00 	sts	0x0074, r13
					msg[1] = 'm';
 1a0:	e0 92 75 00 	sts	0x0075, r14
					msg[2] = 't';
 1a4:	f0 92 76 00 	sts	0x0076, r15
					msg[3] = 0x03;
 1a8:	00 93 77 00 	sts	0x0077, r16
					msg[STATUS_BYTE_POS] = status_byte;
 1ac:	80 91 7c 00 	lds	r24, 0x007C
 1b0:	80 93 78 00 	sts	0x0078, r24
					msg[5] = 0x00;
 1b4:	10 92 79 00 	sts	0x0079, r1
					msg[6] = 0x00;
 1b8:	10 92 7a 00 	sts	0x007A, r1
 1bc:	35 c0       	rjmp	.+106    	; 0x228 <main+0x130>
				}
				*/
				break;
			// Skateboard is on, and motor can be controlled
			case on:
				if(first_time == true)
 1be:	80 91 60 00 	lds	r24, 0x0060
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	59 f4       	brne	.+22     	; 0x1dc <main+0xe4>
				{
					// Set on bit in status byte
					status_byte |= (1 << ON_BIT_POS);
 1c6:	80 91 7c 00 	lds	r24, 0x007C
 1ca:	81 60       	ori	r24, 0x01	; 1
 1cc:	80 93 7c 00 	sts	0x007C, r24
					// Enable motor
					motor_enable();
 1d0:	58 d0       	rcall	.+176    	; 0x282 <motor_enable>
					// Turn power light on
					led_on(0);
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	bf d0       	rcall	.+382    	; 0x354 <led_on>
					// Emit beep
					buzzer_single_beep();
 1d6:	cf d2       	rcall	.+1438   	; 0x776 <buzzer_single_beep>
					first_time = false;
 1d8:	10 92 60 00 	sts	0x0060, r1
				}
				
				
				
				status_byte |= (1 << ON_BIT_POS);
 1dc:	80 91 7c 00 	lds	r24, 0x007C
 1e0:	81 60       	ori	r24, 0x01	; 1
 1e2:	80 93 7c 00 	sts	0x007C, r24
				if(comms_is_new_packet())
 1e6:	f2 d1       	rcall	.+996    	; 0x5cc <comms_is_new_packet>
 1e8:	88 23       	and	r24, r24
 1ea:	09 f4       	brne	.+2      	; 0x1ee <main+0xf6>
 1ec:	9c cf       	rjmp	.-200    	; 0x126 <main+0x2e>
				{
					motor_update();
 1ee:	53 d0       	rcall	.+166    	; 0x296 <motor_update>
					if(!(comms_get_byte(STATUS_BYTE_POS) & (1<<ON_BIT_POS)))
 1f0:	84 e0       	ldi	r24, 0x04	; 4
 1f2:	e1 d1       	rcall	.+962    	; 0x5b6 <comms_get_byte>
 1f4:	80 fd       	sbrc	r24, 0
 1f6:	04 c0       	rjmp	.+8      	; 0x200 <main+0x108>
					{
						main_state = off;
 1f8:	10 92 71 00 	sts	0x0071, r1
						first_time = true;
 1fc:	10 93 60 00 	sts	0x0060, r17
					}
					msg[0] = 'r';
 200:	d0 92 74 00 	sts	0x0074, r13
					msg[1] = 'm';
 204:	e0 92 75 00 	sts	0x0075, r14
					msg[2] = 't';
 208:	f0 92 76 00 	sts	0x0076, r15
					msg[3] = 0x03;
 20c:	00 93 77 00 	sts	0x0077, r16
					msg[STATUS_BYTE_POS] = status_byte;
 210:	80 91 7c 00 	lds	r24, 0x007C
 214:	80 93 78 00 	sts	0x0078, r24
					msg[5] = comms_get_byte(MOTOR_HIGH_BYTE_POS);
 218:	85 e0       	ldi	r24, 0x05	; 5
 21a:	cd d1       	rcall	.+922    	; 0x5b6 <comms_get_byte>
 21c:	80 93 79 00 	sts	0x0079, r24
					msg[6] = comms_get_byte(MOTOR_LOW_BYTE_POS);
 220:	86 e0       	ldi	r24, 0x06	; 6
 222:	c9 d1       	rcall	.+914    	; 0x5b6 <comms_get_byte>
 224:	80 93 7a 00 	sts	0x007A, r24
					msg[7] = '\0';
 228:	10 92 7b 00 	sts	0x007B, r1
					comms_send(msg, 8);
 22c:	84 e7       	ldi	r24, 0x74	; 116
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	68 e0       	ldi	r22, 0x08	; 8
 232:	cf d1       	rcall	.+926    	; 0x5d2 <comms_send>
 234:	78 cf       	rjmp	.-272    	; 0x126 <main+0x2e>

00000236 <motor_init>:
void motor_init(void)
{
	// Set up PWM

	//(0xA0) Enabes OC1A and OC1B pin and clears on compare match
	TCCR1A= (1<<7 | 0<<6 | 1<<5 | 0<<4 | 0<<3 | 0<<2 | 0<<1 | 0<<0); 
 236:	80 ea       	ldi	r24, 0xA0	; 160
 238:	8f bd       	out	0x2f, r24	; 47
	//(0x12) Input noise canceller deactivated,  
	TCCR1B= (0<<7 | 0<<6 | 0<<5 | 1<<4 | 0<<3 | 0<<2 | 1<<1 | 0<<0);
 23a:	82 e1       	ldi	r24, 0x12	; 18
 23c:	8e bd       	out	0x2e, r24	; 46
	//(0x00) Set initial timer value to 0
	TCNT1H=0x00; 
 23e:	1d bc       	out	0x2d, r1	; 45
	TCNT1L=0x00; 
 240:	1c bc       	out	0x2c, r1	; 44
	// Sets the counters top value
	ICR1=9100;     // 50hz 20ms (9000 = 50Hz)
 242:	8c e8       	ldi	r24, 0x8C	; 140
 244:	93 e2       	ldi	r25, 0x23	; 35
 246:	97 bd       	out	0x27, r25	; 39
 248:	86 bd       	out	0x26, r24	; 38
	//Sets output compares to 0
	OCR1AH=0x00; 
 24a:	1b bc       	out	0x2b, r1	; 43
	OCR1AL=0x00; 
 24c:	1a bc       	out	0x2a, r1	; 42
	OCR1BH=0x00; 
 24e:	19 bc       	out	0x29, r1	; 41
	OCR1BL=0x00;
 250:	18 bc       	out	0x28, r1	; 40
	DDRB = 0x02;
 252:	82 e0       	ldi	r24, 0x02	; 2
 254:	87 bb       	out	0x17, r24	; 23
	//Sets external Vref, Left-adjusted data register, ADC0 as input channel
	ADMUX = (0<<7 | 0<<6 | 0<<5 | 0<<4 | 0<<3 | 0<<2 | 0<<1 | 0<<0);
 256:	17 b8       	out	0x07, r1	; 7
	//Enable ADC, start ADC, set in free-running mode, diable interrupt, divide XTAL by 64 (125kHz)
	ADCSRA = (1<<7 | 1<<6 | 1<<5 | 0<<4 | 0<<3 | 1<<2 | 1<<1 | 0<<0);
 258:	86 ee       	ldi	r24, 0xE6	; 230
 25a:	86 b9       	out	0x06, r24	; 6


}
 25c:	08 95       	ret

0000025e <motor_set_speed>:
}


//Accepts value from 0 to 1000
void motor_set_speed(uint16_t value)
{
 25e:	9c 01       	movw	r18, r24
	if(enable == true)
 260:	80 91 7d 00 	lds	r24, 0x007D
 264:	81 30       	cpi	r24, 0x01	; 1
 266:	61 f4       	brne	.+24     	; 0x280 <motor_set_speed+0x22>
	{
		uint16_t difference = MAX_THROTTLE - MIN_THROTTLE;
		OCR1A = (value*(difference/100))/(MAX_CONTROL_VALUE/100) + MIN_THROTTLE;
 268:	c9 01       	movw	r24, r18
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	6a e0       	ldi	r22, 0x0A	; 10
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	b7 d2       	rcall	.+1390   	; 0x7e6 <__udivmodhi4>
 278:	6e 53       	subi	r22, 0x3E	; 62
 27a:	7e 4f       	sbci	r23, 0xFE	; 254
 27c:	7b bd       	out	0x2b, r23	; 43
 27e:	6a bd       	out	0x2a, r22	; 42
 280:	08 95       	ret

00000282 <motor_enable>:

// Enables motor
void motor_enable(void)
{
	// Allows speed to be set by calling motor_set_speed
	enable = true;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	80 93 7d 00 	sts	0x007D, r24
}
 288:	08 95       	ret

0000028a <motor_disable>:

// Disables motor
void motor_disable(void)
{
	// Turn of command to motor
	motor_set_speed(0);
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	e7 df       	rcall	.-50     	; 0x25e <motor_set_speed>
	// Don't allow speed to be set untill re-enabled
	enable = false;
 290:	10 92 7d 00 	sts	0x007D, r1
}
 294:	08 95       	ret

00000296 <motor_update>:


}

void motor_update(void)
{
 296:	1f 93       	push	r17
	static uint16_t motor_speed;
	motor_speed = ((comms_get_byte(MOTOR_HIGH_BYTE_POS)<<8) | (comms_get_byte(MOTOR_LOW_BYTE_POS)));
 298:	85 e0       	ldi	r24, 0x05	; 5
 29a:	8d d1       	rcall	.+794    	; 0x5b6 <comms_get_byte>
 29c:	18 2f       	mov	r17, r24
 29e:	86 e0       	ldi	r24, 0x06	; 6
 2a0:	8a d1       	rcall	.+788    	; 0x5b6 <comms_get_byte>
 2a2:	31 2f       	mov	r19, r17
 2a4:	20 e0       	ldi	r18, 0x00	; 0
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	82 2b       	or	r24, r18
 2aa:	93 2b       	or	r25, r19
 2ac:	90 93 7f 00 	sts	0x007F, r25
 2b0:	80 93 7e 00 	sts	0x007E, r24
	motor_set_speed(motor_speed);
 2b4:	d4 df       	rcall	.-88     	; 0x25e <motor_set_speed>
}
 2b6:	1f 91       	pop	r17
 2b8:	08 95       	ret

000002ba <led_init>:
		none
	function: 
		Gets the address's pointing to the array holding led information
*/
void led_init(uint8_t** led_port_in, uint8_t* led_pin_in)
{
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	ec 01       	movw	r28, r24
	led_port = led_port_in;
 2c0:	90 93 81 00 	sts	0x0081, r25
 2c4:	80 93 80 00 	sts	0x0080, r24
	led_pin = led_pin_in;
 2c8:	70 93 83 00 	sts	0x0083, r23
 2cc:	60 93 82 00 	sts	0x0082, r22
 2d0:	30 e0       	ldi	r19, 0x00	; 0
		{
			DDRC = DDRC | (1 << led_pin[x]);
		}
		else if(led_port[x] == &PORTD)
		{
			DDRD = DDRD | (1 << led_pin[x]);
 2d2:	41 e0       	ldi	r20, 0x01	; 1
 2d4:	50 e0       	ldi	r21, 0x00	; 0
 2d6:	2f c0       	rjmp	.+94     	; 0x336 <led_init+0x7c>

	//Assigns every pin that an LED is connected to as an output
	uint8_t x = 0;
	while(led_port[x] != '\0')
	{
		if(led_port[x] == &PORTB)
 2d8:	e8 33       	cpi	r30, 0x38	; 56
 2da:	f1 05       	cpc	r31, r1
 2dc:	69 f4       	brne	.+26     	; 0x2f8 <led_init+0x3e>
		{
			DDRB = DDRB | (1 << led_pin[x]);
 2de:	27 b3       	in	r18, 0x17	; 23
 2e0:	a6 0f       	add	r26, r22
 2e2:	b7 1f       	adc	r27, r23
 2e4:	ca 01       	movw	r24, r20
 2e6:	0c 90       	ld	r0, X
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <led_init+0x34>
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	0a 94       	dec	r0
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <led_init+0x30>
 2f2:	28 2b       	or	r18, r24
 2f4:	27 bb       	out	0x17, r18	; 23
 2f6:	1e c0       	rjmp	.+60     	; 0x334 <led_init+0x7a>
		}
		else if(led_port[x] == &PORTC)
 2f8:	e5 33       	cpi	r30, 0x35	; 53
 2fa:	f1 05       	cpc	r31, r1
 2fc:	69 f4       	brne	.+26     	; 0x318 <led_init+0x5e>
		{
			DDRC = DDRC | (1 << led_pin[x]);
 2fe:	24 b3       	in	r18, 0x14	; 20
 300:	a6 0f       	add	r26, r22
 302:	b7 1f       	adc	r27, r23
 304:	ca 01       	movw	r24, r20
 306:	0c 90       	ld	r0, X
 308:	02 c0       	rjmp	.+4      	; 0x30e <led_init+0x54>
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	0a 94       	dec	r0
 310:	e2 f7       	brpl	.-8      	; 0x30a <led_init+0x50>
 312:	28 2b       	or	r18, r24
 314:	24 bb       	out	0x14, r18	; 20
 316:	0e c0       	rjmp	.+28     	; 0x334 <led_init+0x7a>
		}
		else if(led_port[x] == &PORTD)
 318:	f2 97       	sbiw	r30, 0x32	; 50
 31a:	61 f4       	brne	.+24     	; 0x334 <led_init+0x7a>
		{
			DDRD = DDRD | (1 << led_pin[x]);
 31c:	21 b3       	in	r18, 0x11	; 17
 31e:	a6 0f       	add	r26, r22
 320:	b7 1f       	adc	r27, r23
 322:	ca 01       	movw	r24, r20
 324:	0c 90       	ld	r0, X
 326:	02 c0       	rjmp	.+4      	; 0x32c <led_init+0x72>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	0a 94       	dec	r0
 32e:	e2 f7       	brpl	.-8      	; 0x328 <led_init+0x6e>
 330:	28 2b       	or	r18, r24
 332:	21 bb       	out	0x11, r18	; 17
		}
		x++;
 334:	3f 5f       	subi	r19, 0xFF	; 255
	led_port = led_port_in;
	led_pin = led_pin_in;

	//Assigns every pin that an LED is connected to as an output
	uint8_t x = 0;
	while(led_port[x] != '\0')
 336:	a3 2f       	mov	r26, r19
 338:	b0 e0       	ldi	r27, 0x00	; 0
 33a:	fd 01       	movw	r30, r26
 33c:	ee 0f       	add	r30, r30
 33e:	ff 1f       	adc	r31, r31
 340:	ec 0f       	add	r30, r28
 342:	fd 1f       	adc	r31, r29
 344:	01 90       	ld	r0, Z+
 346:	f0 81       	ld	r31, Z
 348:	e0 2d       	mov	r30, r0
 34a:	30 97       	sbiw	r30, 0x00	; 0
 34c:	29 f6       	brne	.-118    	; 0x2d8 <led_init+0x1e>
		}
		x++;
	}

	
}
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	08 95       	ret

00000354 <led_on>:

void led_on(uint8_t led_number)
{
	*led_port[led_number] = *led_port[led_number] | (1 << led_pin[led_number]);
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	9c 01       	movw	r18, r24
 358:	22 0f       	add	r18, r18
 35a:	33 1f       	adc	r19, r19
 35c:	e0 91 80 00 	lds	r30, 0x0080
 360:	f0 91 81 00 	lds	r31, 0x0081
 364:	e2 0f       	add	r30, r18
 366:	f3 1f       	adc	r31, r19
 368:	a0 81       	ld	r26, Z
 36a:	b1 81       	ldd	r27, Z+1	; 0x01
 36c:	e0 91 82 00 	lds	r30, 0x0082
 370:	f0 91 83 00 	lds	r31, 0x0083
 374:	e8 0f       	add	r30, r24
 376:	f9 1f       	adc	r31, r25
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	00 80       	ld	r0, Z
 37e:	02 c0       	rjmp	.+4      	; 0x384 <led_on+0x30>
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	0a 94       	dec	r0
 386:	e2 f7       	brpl	.-8      	; 0x380 <led_on+0x2c>
 388:	2c 91       	ld	r18, X
 38a:	28 2b       	or	r18, r24
 38c:	2c 93       	st	X, r18
}
 38e:	08 95       	ret

00000390 <led_off>:

void led_off(uint8_t led_number)
{
	*led_port[led_number] = *led_port[led_number] & (0xFF ^ (1 << led_pin[led_number]));
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	9c 01       	movw	r18, r24
 394:	22 0f       	add	r18, r18
 396:	33 1f       	adc	r19, r19
 398:	e0 91 80 00 	lds	r30, 0x0080
 39c:	f0 91 81 00 	lds	r31, 0x0081
 3a0:	e2 0f       	add	r30, r18
 3a2:	f3 1f       	adc	r31, r19
 3a4:	a0 81       	ld	r26, Z
 3a6:	b1 81       	ldd	r27, Z+1	; 0x01
 3a8:	e0 91 82 00 	lds	r30, 0x0082
 3ac:	f0 91 83 00 	lds	r31, 0x0083
 3b0:	e8 0f       	add	r30, r24
 3b2:	f9 1f       	adc	r31, r25
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	00 80       	ld	r0, Z
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <led_off+0x30>
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	0a 94       	dec	r0
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <led_off+0x2c>
 3c4:	80 95       	com	r24
 3c6:	2c 91       	ld	r18, X
 3c8:	28 23       	and	r18, r24
 3ca:	2c 93       	st	X, r18
}
 3cc:	08 95       	ret

000003ce <led_toggle>:

void led_toggle(uint8_t led_number)
{
	*led_port[led_number] = *led_port[led_number] ^ (1 << led_pin[led_number]);
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	9c 01       	movw	r18, r24
 3d2:	22 0f       	add	r18, r18
 3d4:	33 1f       	adc	r19, r19
 3d6:	e0 91 80 00 	lds	r30, 0x0080
 3da:	f0 91 81 00 	lds	r31, 0x0081
 3de:	e2 0f       	add	r30, r18
 3e0:	f3 1f       	adc	r31, r19
 3e2:	a0 81       	ld	r26, Z
 3e4:	b1 81       	ldd	r27, Z+1	; 0x01
 3e6:	e0 91 82 00 	lds	r30, 0x0082
 3ea:	f0 91 83 00 	lds	r31, 0x0083
 3ee:	e8 0f       	add	r30, r24
 3f0:	f9 1f       	adc	r31, r25
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	00 80       	ld	r0, Z
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <led_toggle+0x30>
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	0a 94       	dec	r0
 400:	e2 f7       	brpl	.-8      	; 0x3fa <led_toggle+0x2c>
 402:	2c 91       	ld	r18, X
 404:	28 27       	eor	r18, r24
 406:	2c 93       	st	X, r18
}
 408:	08 95       	ret

0000040a <tcnt0_init>:
/***Constants***/

void tcnt0_init(void)
{
	// Set up timer/counter with 1024 clk divisor
	TCCR0 = (1<<CS02) | (0<<CS01) | (1<<CS00);
 40a:	85 e0       	ldi	r24, 0x05	; 5
 40c:	83 bf       	out	0x33, r24	; 51
	
	//Enable overflow interrupt on TCNT0
	TIMSK = TIMSK  | (1<<TOIE0);
 40e:	89 b7       	in	r24, 0x39	; 57
 410:	81 60       	ori	r24, 0x01	; 1
 412:	89 bf       	out	0x39, r24	; 57

}
 414:	08 95       	ret

00000416 <__vector_11>:

/***ISR's***/

//Store received byte into buffer when interrupt is triggered
ISR(USART_RXC_vect)
{
 416:	1f 92       	push	r1
 418:	0f 92       	push	r0
 41a:	0f b6       	in	r0, 0x3f	; 63
 41c:	0f 92       	push	r0
 41e:	11 24       	eor	r1, r1
 420:	2f 93       	push	r18
 422:	3f 93       	push	r19
 424:	4f 93       	push	r20
 426:	5f 93       	push	r21
 428:	8f 93       	push	r24
 42a:	9f 93       	push	r25
 42c:	ef 93       	push	r30
 42e:	ff 93       	push	r31
	if( ((rx_write_buffer_pos + 1) == rx_read_buffer_pos) || 
 430:	40 91 86 00 	lds	r20, 0x0086
 434:	50 91 85 00 	lds	r21, 0x0085
 438:	84 2f       	mov	r24, r20
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	01 96       	adiw	r24, 0x01	; 1
 43e:	25 2f       	mov	r18, r21
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	82 17       	cp	r24, r18
 444:	93 07       	cpc	r25, r19
 446:	21 f0       	breq	.+8      	; 0x450 <__vector_11+0x3a>
 448:	41 33       	cpi	r20, 0x31	; 49
 44a:	51 f4       	brne	.+20     	; 0x460 <__stack+0x1>
 44c:	55 23       	and	r21, r21
 44e:	29 f4       	brne	.+10     	; 0x45a <__vector_11+0x44>
		( (rx_write_buffer_pos == (BUFFER_SIZE - 1)) && (rx_read_buffer_pos == 0)) )
	{	
		// Read from register to clear interrupt
		rx_buffer_ovf_flg = UDR;
 450:	8c b1       	in	r24, 0x0c	; 12
		//	Overflow has occured
		rx_buffer_ovf_flg = true;
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	80 93 84 00 	sts	0x0084, r24
 458:	06 c0       	rjmp	.+12     	; 0x466 <__stack+0x7>
	else
	{
		// Check if buffer has reached end of buffer
		if(rx_write_buffer_pos == (BUFFER_SIZE - 1))
		{
			rx_write_buffer_pos = 0;
 45a:	10 92 86 00 	sts	0x0086, r1
 45e:	03 c0       	rjmp	.+6      	; 0x466 <__stack+0x7>
		}
		else
		{
			rx_write_buffer_pos++;
 460:	4f 5f       	subi	r20, 0xFF	; 255
 462:	40 93 86 00 	sts	0x0086, r20
		}
	}
	// Write received data to buffer
	rx_buffer[rx_write_buffer_pos] = UDR;
 466:	8c b1       	in	r24, 0x0c	; 12
 468:	e0 91 86 00 	lds	r30, 0x0086
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	e7 57       	subi	r30, 0x77	; 119
 470:	ff 4f       	sbci	r31, 0xFF	; 255
 472:	80 83       	st	Z, r24
	
}
 474:	ff 91       	pop	r31
 476:	ef 91       	pop	r30
 478:	9f 91       	pop	r25
 47a:	8f 91       	pop	r24
 47c:	5f 91       	pop	r21
 47e:	4f 91       	pop	r20
 480:	3f 91       	pop	r19
 482:	2f 91       	pop	r18
 484:	0f 90       	pop	r0
 486:	0f be       	out	0x3f, r0	; 63
 488:	0f 90       	pop	r0
 48a:	1f 90       	pop	r1
 48c:	18 95       	reti

0000048e <__vector_12>:

//On clear register, insert byte if write_buffer is not the same as the write buffer
ISR(USART_UDRE_vect)
{
 48e:	1f 92       	push	r1
 490:	0f 92       	push	r0
 492:	0f b6       	in	r0, 0x3f	; 63
 494:	0f 92       	push	r0
 496:	11 24       	eor	r1, r1
 498:	8f 93       	push	r24
 49a:	9f 93       	push	r25
 49c:	ef 93       	push	r30
 49e:	ff 93       	push	r31
	
	// Check if there is more data to send in buffer
	if(tx_read_buffer_pos == tx_write_buffer_pos)
 4a0:	90 91 88 00 	lds	r25, 0x0088
 4a4:	80 91 87 00 	lds	r24, 0x0087
 4a8:	98 17       	cp	r25, r24
 4aa:	11 f4       	brne	.+4      	; 0x4b0 <__vector_12+0x22>
    {
		//Disable interrupts
        UCSRB &= ~(1<<UDRIE);
 4ac:	55 98       	cbi	0x0a, 5	; 10
 4ae:	0f c0       	rjmp	.+30     	; 0x4ce <__vector_12+0x40>
    }
	else
	{
		if(tx_read_buffer_pos == (BUFFER_SIZE-1))
 4b0:	91 33       	cpi	r25, 0x31	; 49
 4b2:	19 f4       	brne	.+6      	; 0x4ba <__vector_12+0x2c>
		{
			tx_read_buffer_pos = 0;
 4b4:	10 92 88 00 	sts	0x0088, r1
 4b8:	03 c0       	rjmp	.+6      	; 0x4c0 <__vector_12+0x32>
			
		}
		else
		{
			tx_read_buffer_pos++;
 4ba:	9f 5f       	subi	r25, 0xFF	; 255
 4bc:	90 93 88 00 	sts	0x0088, r25
			
		}
        UDR = tx_buffer[tx_read_buffer_pos];
 4c0:	e0 91 88 00 	lds	r30, 0x0088
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	e5 54       	subi	r30, 0x45	; 69
 4c8:	ff 4f       	sbci	r31, 0xFF	; 255
 4ca:	80 81       	ld	r24, Z
 4cc:	8c b9       	out	0x0c, r24	; 12
    }

}
 4ce:	ff 91       	pop	r31
 4d0:	ef 91       	pop	r30
 4d2:	9f 91       	pop	r25
 4d4:	8f 91       	pop	r24
 4d6:	0f 90       	pop	r0
 4d8:	0f be       	out	0x3f, r0	; 63
 4da:	0f 90       	pop	r0
 4dc:	1f 90       	pop	r1
 4de:	18 95       	reti

000004e0 <usart_init>:


void usart_init(void)
{
	// Set baud rate (9600)
	UBRRH = 0;
 4e0:	10 bc       	out	0x20, r1	; 32
	UBRRL = 49; //51 //48 works for remote //49 works for skateboard
 4e2:	81 e3       	ldi	r24, 0x31	; 49
 4e4:	89 b9       	out	0x09, r24	; 9
	// Enabe TX and RX, enable rx interrups (tx interrupts enabled when data loaded into tx buffer)
	UCSRB = (1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN)| (1<<TXEN) | (0<<UCSZ2);
 4e6:	88 e9       	ldi	r24, 0x98	; 152
 4e8:	8a b9       	out	0x0a, r24	; 10
	// Select UCSRC, 1-stop bit, 8-bits of data
	UCSRC = (1<<URSEL) | (0<<UMSEL) | (UPM1<<0) | (UPM0<<0) | (USBS<<0) | (1<<UCSZ1) | (1<<UCSZ0);
 4ea:	87 e8       	ldi	r24, 0x87	; 135
 4ec:	80 bd       	out	0x20, r24	; 32

	// Clear the tx buffer ready flag as usart is interrupt driven (do this set after intialising usart)
	UCSRA = (0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<PE) | (0<<U2X);
 4ee:	1b b8       	out	0x0b, r1	; 11
}
 4f0:	08 95       	ret

000004f2 <usart_write_to_tx_buffer>:
// Loads data into transmit buffer. Stops when finds null string (make sure to add one to input!).
// Terminates if message is longer than BUFFER_SIZE
void usart_write_to_tx_buffer(uint8_t data)
{
	//Stall untill there is free space to insert character into buffer
	while( ((tx_write_buffer_pos + 1) == tx_read_buffer_pos) || ( (tx_write_buffer_pos == BUFFER_SIZE) && (tx_read_buffer_pos == 0) ))
 4f2:	90 91 87 00 	lds	r25, 0x0087
 4f6:	29 2f       	mov	r18, r25
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	2f 5f       	subi	r18, 0xFF	; 255
 4fc:	3f 4f       	sbci	r19, 0xFF	; 255
 4fe:	60 91 88 00 	lds	r22, 0x0088
 502:	46 2f       	mov	r20, r22
 504:	50 e0       	ldi	r21, 0x00	; 0
 506:	24 17       	cp	r18, r20
 508:	35 07       	cpc	r19, r21
 50a:	a9 f0       	breq	.+42     	; 0x536 <usart_write_to_tx_buffer+0x44>
 50c:	92 33       	cpi	r25, 0x32	; 50
 50e:	19 f4       	brne	.+6      	; 0x516 <usart_write_to_tx_buffer+0x24>
 510:	66 23       	and	r22, r22
 512:	c9 f3       	breq	.-14     	; 0x506 <usart_write_to_tx_buffer+0x14>
 514:	05 c0       	rjmp	.+10     	; 0x520 <usart_write_to_tx_buffer+0x2e>
	{
		
	}
	
	//Increment write buffer
	if(tx_write_buffer_pos == (BUFFER_SIZE-1))
 516:	91 33       	cpi	r25, 0x31	; 49
 518:	19 f4       	brne	.+6      	; 0x520 <usart_write_to_tx_buffer+0x2e>
	{
		tx_write_buffer_pos = 0;
 51a:	10 92 87 00 	sts	0x0087, r1
 51e:	03 c0       	rjmp	.+6      	; 0x526 <usart_write_to_tx_buffer+0x34>
	}
	else
	{
		tx_write_buffer_pos++;
 520:	9f 5f       	subi	r25, 0xFF	; 255
 522:	90 93 87 00 	sts	0x0087, r25
	}
	
	//Write data to tx buffer
	tx_buffer[tx_write_buffer_pos] = data;
 526:	e0 91 87 00 	lds	r30, 0x0087
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	e5 54       	subi	r30, 0x45	; 69
 52e:	ff 4f       	sbci	r31, 0xFF	; 255
 530:	80 83       	st	Z, r24

	//Enables data register empty interrupt
	 UCSRB |= (1<<UDRIE);
 532:	55 9a       	sbi	0x0a, 5	; 10
}
 534:	08 95       	ret
 536:	ff cf       	rjmp	.-2      	; 0x536 <usart_write_to_tx_buffer+0x44>

00000538 <usart_space_in_tx_buffer>:

uint8_t usart_space_in_tx_buffer(void)
{
 538:	40 e0       	ldi	r20, 0x00	; 0
 53a:	20 91 87 00 	lds	r18, 0x0087
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	2f 5f       	subi	r18, 0xFF	; 255
 542:	3f 4f       	sbci	r19, 0xFF	; 255
 544:	80 91 88 00 	lds	r24, 0x0088
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	28 17       	cp	r18, r24
 54c:	39 07       	cpc	r19, r25
 54e:	09 f0       	breq	.+2      	; 0x552 <usart_space_in_tx_buffer+0x1a>
 550:	41 e0       	ldi	r20, 0x01	; 1
	} 
	else
	{
		return false;
	}
}
 552:	84 2f       	mov	r24, r20
 554:	08 95       	ret

00000556 <usart_send>:

void usart_send(uint8_t *data, uint8_t num_of_bytes)
{
 556:	0f 93       	push	r16
 558:	1f 93       	push	r17
 55a:	cf 93       	push	r28
 55c:	df 93       	push	r29
 55e:	06 2f       	mov	r16, r22
 560:	ec 01       	movw	r28, r24
 562:	10 e0       	ldi	r17, 0x00	; 0
 564:	03 c0       	rjmp	.+6      	; 0x56c <usart_send+0x16>
	uint8_t x = 0;
	// Place bytes in tx buffer
	while(x != num_of_bytes)
	{
		usart_write_to_tx_buffer(data[x]);
 566:	89 91       	ld	r24, Y+
 568:	c4 df       	rcall	.-120    	; 0x4f2 <usart_write_to_tx_buffer>
		x++;
 56a:	1f 5f       	subi	r17, 0xFF	; 255

void usart_send(uint8_t *data, uint8_t num_of_bytes)
{
	uint8_t x = 0;
	// Place bytes in tx buffer
	while(x != num_of_bytes)
 56c:	10 17       	cp	r17, r16
 56e:	d9 f7       	brne	.-10     	; 0x566 <usart_send+0x10>
	{
		usart_write_to_tx_buffer(data[x]);
		x++;
	}
}
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	1f 91       	pop	r17
 576:	0f 91       	pop	r16
 578:	08 95       	ret

0000057a <usart_get_byte>:

//Returns true if there is a new byte present in rx buffer, and stores it in data. Else returns false.
uint8_t usart_get_byte(uint8_t* data)
{
 57a:	dc 01       	movw	r26, r24
	if(rx_read_buffer_pos != rx_write_buffer_pos)
 57c:	90 91 85 00 	lds	r25, 0x0085
 580:	80 91 86 00 	lds	r24, 0x0086
 584:	98 17       	cp	r25, r24
 586:	11 f4       	brne	.+4      	; 0x58c <usart_get_byte+0x12>
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	08 95       	ret
	{
		if(rx_read_buffer_pos == (BUFFER_SIZE - 1))
 58c:	91 33       	cpi	r25, 0x31	; 49
 58e:	19 f4       	brne	.+6      	; 0x596 <usart_get_byte+0x1c>
		{
			rx_read_buffer_pos = 0;
 590:	10 92 85 00 	sts	0x0085, r1
 594:	03 c0       	rjmp	.+6      	; 0x59c <usart_get_byte+0x22>
		}
		else
		{
			rx_read_buffer_pos++;
 596:	9f 5f       	subi	r25, 0xFF	; 255
 598:	90 93 85 00 	sts	0x0085, r25
		}
		data[0] = rx_buffer[rx_read_buffer_pos];
 59c:	e0 91 85 00 	lds	r30, 0x0085
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	e7 57       	subi	r30, 0x77	; 119
 5a4:	ff 4f       	sbci	r31, 0xFF	; 255
 5a6:	80 81       	ld	r24, Z
 5a8:	8c 93       	st	X, r24
 5aa:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return false;
	}
}
 5ac:	08 95       	ret

000005ae <usart_rx_overflow>:

uint8_t usart_rx_overflow(void)
{
	return rx_buffer_ovf_flg;
}
 5ae:	80 91 84 00 	lds	r24, 0x0084
 5b2:	08 95       	ret

000005b4 <comms_config>:

void comms_config(uint8_t *command, uint8_t *parameter, uint8_t parameter_bits)
{
	
	
}
 5b4:	08 95       	ret

000005b6 <comms_get_byte>:
}

uint8_t comms_get_byte(uint8_t byte_num)
{
	// Clear unread data flag once at east one byte from the new packet has been read
	unread_data_flg = false;
 5b6:	10 92 ed 00 	sts	0x00ED, r1
 5ba:	e7 ef       	ldi	r30, 0xF7	; 247
 5bc:	f0 e0       	ldi	r31, 0x00	; 0
 5be:	e8 0f       	add	r30, r24
 5c0:	f1 1d       	adc	r31, r1
	return packet_buffer[byte_num];
}
 5c2:	80 81       	ld	r24, Z
 5c4:	08 95       	ret

000005c6 <comms_timeout>:

// Returns true if comms has timeout because it has received a packet in COMMS_TIMEOUT_PERIOD
uint8_t comms_timeout(void)
{
	return comms_timeout_flg;
}
 5c6:	80 91 61 00 	lds	r24, 0x0061
 5ca:	08 95       	ret

000005cc <comms_is_new_packet>:

// Returns true if their is a new packet that hasn't been read
uint8_t comms_is_new_packet(void)
{
	return unread_data_flg;
}
 5cc:	80 91 ed 00 	lds	r24, 0x00ED
 5d0:	08 95       	ret

000005d2 <comms_send>:
}

// Function just passes variables onto usart
void comms_send(uint8_t *data, uint8_t num_of_bytes)
{
	usart_send(data, num_of_bytes);
 5d2:	c1 df       	rcall	.-126    	; 0x556 <usart_send>
}
 5d4:	08 95       	ret

000005d6 <comms_retrieve_data>:
		} 
	}
}

void comms_retrieve_data()
{
 5d6:	ef 92       	push	r14
 5d8:	ff 92       	push	r15
 5da:	0f 93       	push	r16
 5dc:	1f 93       	push	r17
					// Go back to idle state if header not valid
					comms_state = idle;
				}
				break;
			case packet_data_count:
				comms_state = packet_data;
 5de:	94 e0       	ldi	r25, 0x04	; 4
 5e0:	e9 2e       	mov	r14, r25
					comms_state = packet_complete;
				}
				
				break;
			case receiving_checksum:
				comms_state = packet_complete;
 5e2:	06 e0       	ldi	r16, 0x06	; 6
				break;
			case packet_complete:
				// Set new packet flag true so comms decode can be called
				new_packet_flg = true;
 5e4:	11 e0       	ldi	r17, 0x01	; 1
			case third_iden_char:
				if(rx_data_byte == iden_chars[2])
				{
					packet_buffer[packet_buffer_pos] = rx_data_byte;
					packet_buffer_pos++;
					comms_state = packet_data_count;
 5e6:	83 e0       	ldi	r24, 0x03	; 3
 5e8:	f8 2e       	mov	r15, r24
 5ea:	83 c0       	rjmp	.+262    	; 0x6f2 <comms_retrieve_data+0x11c>
	static uint8_t rx_data_byte;

	while(usart_get_byte(&rx_data_byte))
	{
		
		switch(comms_state){
 5ec:	80 91 f3 00 	lds	r24, 0x00F3
 5f0:	83 30       	cpi	r24, 0x03	; 3
 5f2:	09 f4       	brne	.+2      	; 0x5f6 <comms_retrieve_data+0x20>
 5f4:	4e c0       	rjmp	.+156    	; 0x692 <comms_retrieve_data+0xbc>
 5f6:	84 30       	cpi	r24, 0x04	; 4
 5f8:	58 f4       	brcc	.+22     	; 0x610 <comms_retrieve_data+0x3a>
 5fa:	81 30       	cpi	r24, 0x01	; 1
 5fc:	11 f1       	breq	.+68     	; 0x642 <comms_retrieve_data+0x6c>
 5fe:	90 91 f0 00 	lds	r25, 0x00F0
 602:	e0 91 29 01 	lds	r30, 0x0129
 606:	f0 91 2a 01 	lds	r31, 0x012A
 60a:	82 30       	cpi	r24, 0x02	; 2
 60c:	90 f5       	brcc	.+100    	; 0x672 <comms_retrieve_data+0x9c>
 60e:	0a c0       	rjmp	.+20     	; 0x624 <comms_retrieve_data+0x4e>
 610:	85 30       	cpi	r24, 0x05	; 5
 612:	09 f4       	brne	.+2      	; 0x616 <comms_retrieve_data+0x40>
 614:	5d c0       	rjmp	.+186    	; 0x6d0 <comms_retrieve_data+0xfa>
 616:	85 30       	cpi	r24, 0x05	; 5
 618:	08 f4       	brcc	.+2      	; 0x61c <comms_retrieve_data+0x46>
 61a:	4c c0       	rjmp	.+152    	; 0x6b4 <comms_retrieve_data+0xde>
 61c:	86 30       	cpi	r24, 0x06	; 6
 61e:	09 f0       	breq	.+2      	; 0x622 <comms_retrieve_data+0x4c>
 620:	5e c0       	rjmp	.+188    	; 0x6de <comms_retrieve_data+0x108>
 622:	59 c0       	rjmp	.+178    	; 0x6d6 <comms_retrieve_data+0x100>
			case idle:
				
				packet_buffer_pos = 0;
 624:	10 92 f2 00 	sts	0x00F2, r1
				num_of_data_bytes = 0;
 628:	10 92 f1 00 	sts	0x00F1, r1
				if(rx_data_byte == iden_chars[0])
 62c:	80 81       	ld	r24, Z
 62e:	98 17       	cp	r25, r24
 630:	09 f0       	breq	.+2      	; 0x634 <comms_retrieve_data+0x5e>
 632:	57 c0       	rjmp	.+174    	; 0x6e2 <comms_retrieve_data+0x10c>
				{
					packet_buffer[packet_buffer_pos] = rx_data_byte;
 634:	90 93 f7 00 	sts	0x00F7, r25
					packet_buffer_pos++;
 638:	10 93 f2 00 	sts	0x00F2, r17
					comms_state = second_iden_char;
 63c:	10 93 f3 00 	sts	0x00F3, r17
 640:	50 c0       	rjmp	.+160    	; 0x6e2 <comms_retrieve_data+0x10c>
				}
				break;
			case second_iden_char:
				if(rx_data_byte == iden_chars[1])
 642:	90 91 f0 00 	lds	r25, 0x00F0
 646:	e0 91 29 01 	lds	r30, 0x0129
 64a:	f0 91 2a 01 	lds	r31, 0x012A
 64e:	81 81       	ldd	r24, Z+1	; 0x01
 650:	98 17       	cp	r25, r24
 652:	09 f0       	breq	.+2      	; 0x656 <comms_retrieve_data+0x80>
 654:	44 c0       	rjmp	.+136    	; 0x6de <comms_retrieve_data+0x108>
				{
					packet_buffer[packet_buffer_pos] = rx_data_byte;
 656:	80 91 f2 00 	lds	r24, 0x00F2
 65a:	e8 2f       	mov	r30, r24
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	e9 50       	subi	r30, 0x09	; 9
 660:	ff 4f       	sbci	r31, 0xFF	; 255
 662:	90 83       	st	Z, r25
					packet_buffer_pos++;
 664:	8f 5f       	subi	r24, 0xFF	; 255
 666:	80 93 f2 00 	sts	0x00F2, r24
					comms_state = third_iden_char;
 66a:	82 e0       	ldi	r24, 0x02	; 2
 66c:	80 93 f3 00 	sts	0x00F3, r24
 670:	38 c0       	rjmp	.+112    	; 0x6e2 <comms_retrieve_data+0x10c>
					// Go back to idle state if header not valid
					comms_state = idle;
				}
				break;
			case third_iden_char:
				if(rx_data_byte == iden_chars[2])
 672:	82 81       	ldd	r24, Z+2	; 0x02
 674:	98 17       	cp	r25, r24
 676:	99 f5       	brne	.+102    	; 0x6de <comms_retrieve_data+0x108>
				{
					packet_buffer[packet_buffer_pos] = rx_data_byte;
 678:	80 91 f2 00 	lds	r24, 0x00F2
 67c:	e8 2f       	mov	r30, r24
 67e:	f0 e0       	ldi	r31, 0x00	; 0
 680:	e9 50       	subi	r30, 0x09	; 9
 682:	ff 4f       	sbci	r31, 0xFF	; 255
 684:	90 83       	st	Z, r25
					packet_buffer_pos++;
 686:	8f 5f       	subi	r24, 0xFF	; 255
 688:	80 93 f2 00 	sts	0x00F2, r24
					comms_state = packet_data_count;
 68c:	f0 92 f3 00 	sts	0x00F3, r15
 690:	28 c0       	rjmp	.+80     	; 0x6e2 <comms_retrieve_data+0x10c>
					// Go back to idle state if header not valid
					comms_state = idle;
				}
				break;
			case packet_data_count:
				comms_state = packet_data;
 692:	e0 92 f3 00 	sts	0x00F3, r14
				packet_buffer[packet_buffer_pos] = rx_data_byte;
 696:	80 91 f2 00 	lds	r24, 0x00F2
 69a:	90 91 f0 00 	lds	r25, 0x00F0
 69e:	e8 2f       	mov	r30, r24
 6a0:	f0 e0       	ldi	r31, 0x00	; 0
 6a2:	e9 50       	subi	r30, 0x09	; 9
 6a4:	ff 4f       	sbci	r31, 0xFF	; 255
 6a6:	90 83       	st	Z, r25
				num_of_data_bytes = rx_data_byte;
 6a8:	90 93 f1 00 	sts	0x00F1, r25
				packet_buffer_pos++;
 6ac:	8f 5f       	subi	r24, 0xFF	; 255
 6ae:	80 93 f2 00 	sts	0x00F2, r24
 6b2:	17 c0       	rjmp	.+46     	; 0x6e2 <comms_retrieve_data+0x10c>
				break;

			case packet_data:
				
				packet_buffer[packet_buffer_pos] = rx_data_byte;
 6b4:	80 91 f2 00 	lds	r24, 0x00F2
 6b8:	e8 2f       	mov	r30, r24
 6ba:	f0 e0       	ldi	r31, 0x00	; 0
 6bc:	e9 50       	subi	r30, 0x09	; 9
 6be:	ff 4f       	sbci	r31, 0xFF	; 255
 6c0:	90 91 f0 00 	lds	r25, 0x00F0
 6c4:	90 83       	st	Z, r25
				packet_buffer_pos++;
 6c6:	8f 5f       	subi	r24, 0xFF	; 255
 6c8:	80 93 f2 00 	sts	0x00F2, r24
				if(packet_buffer_pos >= 4+3) //FIX
 6cc:	87 30       	cpi	r24, 0x07	; 7
 6ce:	48 f0       	brcs	.+18     	; 0x6e2 <comms_retrieve_data+0x10c>
					comms_state = packet_complete;
				}
				
				break;
			case receiving_checksum:
				comms_state = packet_complete;
 6d0:	00 93 f3 00 	sts	0x00F3, r16
 6d4:	06 c0       	rjmp	.+12     	; 0x6e2 <comms_retrieve_data+0x10c>
				break;
			case packet_complete:
				// Set new packet flag true so comms decode can be called
				new_packet_flg = true;
 6d6:	10 93 ee 00 	sts	0x00EE, r17
				led_toggle(2);
 6da:	82 e0       	ldi	r24, 0x02	; 2
 6dc:	78 de       	rcall	.-784    	; 0x3ce <led_toggle>
				comms_state = idle;
				break;
			default:
				comms_state = idle;
 6de:	10 92 f3 00 	sts	0x00F3, r1
				break;
		}
		
		//packet_buffer_pos++;
		if(packet_buffer_pos > BUFFER_SIZE)					//Resets packet buffer index (shouldn't happen)
 6e2:	80 91 f2 00 	lds	r24, 0x00F2
 6e6:	83 33       	cpi	r24, 0x33	; 51
 6e8:	20 f0       	brcs	.+8      	; 0x6f2 <comms_retrieve_data+0x11c>
		{
			packet_buffer_pos = 0;
 6ea:	10 92 f2 00 	sts	0x00F2, r1
			comms_packet_buffer_overrun_flg = true;
 6ee:	10 93 ef 00 	sts	0x00EF, r17
	static enum comms_states_enum comms_state = idle;
	static uint8_t packet_buffer_pos = 0;
	static uint8_t num_of_data_bytes = 0;
	static uint8_t rx_data_byte;

	while(usart_get_byte(&rx_data_byte))
 6f2:	80 ef       	ldi	r24, 0xF0	; 240
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	41 df       	rcall	.-382    	; 0x57a <usart_get_byte>
 6f8:	88 23       	and	r24, r24
 6fa:	09 f0       	breq	.+2      	; 0x6fe <comms_retrieve_data+0x128>
 6fc:	77 cf       	rjmp	.-274    	; 0x5ec <comms_retrieve_data+0x16>
		{
			packet_buffer_pos = 0;
			comms_packet_buffer_overrun_flg = true;
		}
	}
}
 6fe:	1f 91       	pop	r17
 700:	0f 91       	pop	r16
 702:	ff 90       	pop	r15
 704:	ef 90       	pop	r14
 706:	08 95       	ret

00000708 <comms_update>:
	
}

void comms_update(void)
{
	comms_retrieve_data();
 708:	66 df       	rcall	.-308    	; 0x5d6 <comms_retrieve_data>

	//Decode if their are new packets present
	if(new_packet_flg)
 70a:	80 91 ee 00 	lds	r24, 0x00EE
 70e:	88 23       	and	r24, r24
 710:	61 f0       	breq	.+24     	; 0x72a <comms_update+0x22>
	{
		// Reset timeout counter
		timeout_counter = 0;
 712:	10 92 f5 00 	sts	0x00F5, r1
 716:	10 92 f4 00 	sts	0x00F4, r1
		// Set timeout flag to false when new packet arrives
		comms_timeout_flg = false;
 71a:	10 92 61 00 	sts	0x0061, r1
		new_packet_flg = false;
 71e:	10 92 ee 00 	sts	0x00EE, r1
		// Set unread data flag (cleared when comms_get_byte is called)
		unread_data_flg = true;
 722:	81 e0       	ldi	r24, 0x01	; 1
 724:	80 93 ed 00 	sts	0x00ED, r24
 728:	08 95       	ret
	}
	else
	{
		// Increment timeout counter if no packet arrived
		timeout_counter++;
 72a:	80 91 f4 00 	lds	r24, 0x00F4
 72e:	90 91 f5 00 	lds	r25, 0x00F5
 732:	01 96       	adiw	r24, 0x01	; 1
 734:	90 93 f5 00 	sts	0x00F5, r25
 738:	80 93 f4 00 	sts	0x00F4, r24
		// Set flag if timeout counter has reached the limit without being reset by a new packet arriving
		if(timeout_counter == COMMS_TIMEOUT_PERIOD)
 73c:	80 55       	subi	r24, 0x50	; 80
 73e:	93 4c       	sbci	r25, 0xC3	; 195
 740:	19 f4       	brne	.+6      	; 0x748 <comms_update+0x40>
		{
			comms_timeout_flg = true;
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	80 93 61 00 	sts	0x0061, r24
 748:	08 95       	ret

0000074a <comms_init>:
static uint16_t timeout_counter = 0;

/***Function Definitions***/

void comms_init(uint8_t* iden_chars_in)
{
 74a:	0f 93       	push	r16
 74c:	1f 93       	push	r17
 74e:	8c 01       	movw	r16, r24
	led_on(0);
 750:	80 e0       	ldi	r24, 0x00	; 0
 752:	00 de       	rcall	.-1024   	; 0x354 <led_on>
	iden_chars = iden_chars_in;
 754:	10 93 2a 01 	sts	0x012A, r17
 758:	00 93 29 01 	sts	0x0129, r16
	
	// Intialise usart used to communicate with comms
	usart_init();
 75c:	c1 de       	rcall	.-638    	; 0x4e0 <usart_init>

	//Signal that intialisation is complete
	comms_init_complete_flg = true;
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	80 93 f6 00 	sts	0x00F6, r24
}
 764:	1f 91       	pop	r17
 766:	0f 91       	pop	r16
 768:	08 95       	ret

0000076a <buzzer_init>:
static uint16_t count_limit = 0;

void buzzer_init(void)
{
	// Set buzzer pin as output
	DDRB |= (1<<PB0);
 76a:	b8 9a       	sbi	0x17, 0	; 23
}
 76c:	08 95       	ret

0000076e <buzzer_on>:

void buzzer_on(void)
{
	// Set pin high
	PORTB |= (1<<PB0);
 76e:	c0 9a       	sbi	0x18, 0	; 24
}
 770:	08 95       	ret

00000772 <buzzer_off>:

void buzzer_off(void)
{
	// Set pin low
	PORTB &= ((1<<PB0)^0xFF);
 772:	c0 98       	cbi	0x18, 0	; 24
}
 774:	08 95       	ret

00000776 <buzzer_single_beep>:

void buzzer_single_beep(void)
{
	
	count = 0;
 776:	10 92 2e 01 	sts	0x012E, r1
 77a:	10 92 2d 01 	sts	0x012D, r1
	count_limit = BUZZER_SINGLE_BEEP_CYCLES;
 77e:	80 e5       	ldi	r24, 0x50	; 80
 780:	93 ec       	ldi	r25, 0xC3	; 195
 782:	90 93 2c 01 	sts	0x012C, r25
 786:	80 93 2b 01 	sts	0x012B, r24
}

void buzzer_on(void)
{
	// Set pin high
	PORTB |= (1<<PB0);
 78a:	c0 9a       	sbi	0x18, 0	; 24
{
	
	count = 0;
	count_limit = BUZZER_SINGLE_BEEP_CYCLES;
	buzzer_on();	
}
 78c:	08 95       	ret

0000078e <buzzer_update>:

void buzzer_update(void)
{
	if(count_limit != 0)
 78e:	20 91 2b 01 	lds	r18, 0x012B
 792:	30 91 2c 01 	lds	r19, 0x012C
 796:	21 15       	cp	r18, r1
 798:	31 05       	cpc	r19, r1
 79a:	a9 f0       	breq	.+42     	; 0x7c6 <buzzer_update+0x38>
	{
		count++;
 79c:	80 91 2d 01 	lds	r24, 0x012D
 7a0:	90 91 2e 01 	lds	r25, 0x012E
 7a4:	01 96       	adiw	r24, 0x01	; 1
 7a6:	90 93 2e 01 	sts	0x012E, r25
 7aa:	80 93 2d 01 	sts	0x012D, r24
		if(count == count_limit)
 7ae:	82 17       	cp	r24, r18
 7b0:	93 07       	cpc	r25, r19
 7b2:	49 f4       	brne	.+18     	; 0x7c6 <buzzer_update+0x38>
}

void buzzer_off(void)
{
	// Set pin low
	PORTB &= ((1<<PB0)^0xFF);
 7b4:	c0 98       	cbi	0x18, 0	; 24
	{
		count++;
		if(count == count_limit)
		{
			 buzzer_off();
			 count = 0;
 7b6:	10 92 2e 01 	sts	0x012E, r1
 7ba:	10 92 2d 01 	sts	0x012D, r1
			 count_limit = 0;
 7be:	10 92 2c 01 	sts	0x012C, r1
 7c2:	10 92 2b 01 	sts	0x012B, r1
 7c6:	08 95       	ret

000007c8 <alarm_init>:
static uint8_t alarm_triggered_flg = false;

void alarm_init(void)
{
	// Sets tilt switch as input
	DDRD &= (0<<PD4)^0xFF;
 7c8:	81 b3       	in	r24, 0x11	; 17
 7ca:	81 bb       	out	0x11, r24	; 17
}
 7cc:	08 95       	ret

000007ce <alarm_update>:

void alarm_update(void)
{
	if(!(PIND & (1<<PD4)))
 7ce:	84 99       	sbic	0x10, 4	; 16
 7d0:	03 c0       	rjmp	.+6      	; 0x7d8 <alarm_update+0xa>
	{
		alarm_triggered_flg = true;
 7d2:	81 e0       	ldi	r24, 0x01	; 1
 7d4:	80 93 2f 01 	sts	0x012F, r24
 7d8:	08 95       	ret

000007da <alarm_reset>:
	}
}

void alarm_reset(void)
{
	alarm_triggered_flg = false;
 7da:	10 92 2f 01 	sts	0x012F, r1
}
 7de:	08 95       	ret

000007e0 <alarm_is_triggered>:

uint8_t alarm_is_triggered(void)
{
	return alarm_triggered_flg;
}
 7e0:	80 91 2f 01 	lds	r24, 0x012F
 7e4:	08 95       	ret

000007e6 <__udivmodhi4>:
 7e6:	aa 1b       	sub	r26, r26
 7e8:	bb 1b       	sub	r27, r27
 7ea:	51 e1       	ldi	r21, 0x11	; 17
 7ec:	07 c0       	rjmp	.+14     	; 0x7fc <__udivmodhi4_ep>

000007ee <__udivmodhi4_loop>:
 7ee:	aa 1f       	adc	r26, r26
 7f0:	bb 1f       	adc	r27, r27
 7f2:	a6 17       	cp	r26, r22
 7f4:	b7 07       	cpc	r27, r23
 7f6:	10 f0       	brcs	.+4      	; 0x7fc <__udivmodhi4_ep>
 7f8:	a6 1b       	sub	r26, r22
 7fa:	b7 0b       	sbc	r27, r23

000007fc <__udivmodhi4_ep>:
 7fc:	88 1f       	adc	r24, r24
 7fe:	99 1f       	adc	r25, r25
 800:	5a 95       	dec	r21
 802:	a9 f7       	brne	.-22     	; 0x7ee <__udivmodhi4_loop>
 804:	80 95       	com	r24
 806:	90 95       	com	r25
 808:	bc 01       	movw	r22, r24
 80a:	cd 01       	movw	r24, r26
 80c:	08 95       	ret

0000080e <_exit>:
 80e:	f8 94       	cli

00000810 <__stop_program>:
 810:	ff cf       	rjmp	.-2      	; 0x810 <__stop_program>
